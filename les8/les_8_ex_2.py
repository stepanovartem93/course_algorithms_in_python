'''2. Доработать алгоритм Дейкстры (рассматривался на уроке),
чтобы он дополнительно возвращал список вершин, которые необходимо обойти.'''

g = [
    [0, 0, 1, 1, 9, 0, 0, 0],
    [0, 0, 9, 4, 0, 0, 7, 0],
    [0, 9, 0, 0, 3, 0, 6, 0],
    [0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 1, 0],
    [0, 0, 0, 0, 0, 0, 5, 0],
    [0, 0, 7, 0, 8, 1, 0, 0],
    [0, 0, 0, 0, 0, 2, 7, 0],
]

def dijkstra(graph, start): #на входе принимает граф и начальную вершину
    length = len(graph)
    is_visited = [False] * length #список хранит данные, посещали ли вершину или нет
    cost = [float('inf')] * length #список хранит стоимость пути до конкретной вершины
    parent = [-1] * length #список хранит соответствующего родителя (пока не знаем вершину старта, там хранится -1)

    cost[start] = 0
    min_cost = 0 #переменная показывает движемся ли по графу или нет

    while min_cost < float('inf'):

        is_visited[start] = True #отметим стартую вершину как посещённую

        for i, vertex in enumerate(graph[start]): #проходим по то строке таблицы смежности, где хранится значение start
            if vertex != 0 and not is_visited[i]:
                '''выполняем проверку, если значение вершины не равно 0, т.е.там есть ребро и данную вершину не посещали,
                             то нужно проверить расстояния'''
                if cost[i] > vertex + cost[start]:
                    cost[i] = vertex + cost[start] #записываем новое более короткое расстояние
                    parent[i] = start #указываем какая вершина является родительской

        min_cost = float('inf')
        for i in range(length):
            if min_cost > cost[i] and not is_visited[i]:
                min_cost = cost[i]
                start = i

    return cost


s = int(input("От какой вершины идти: "))
print(dijkstra(g, s))